// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: agent/private/display/v1/service.proto

package displayv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrivateDisplayService_List_FullMethodName       = "/agent.private.display.v1.PrivateDisplayService/List"
	PrivateDisplayService_SetEnabled_FullMethodName = "/agent.private.display.v1.PrivateDisplayService/SetEnabled"
)

// PrivateDisplayServiceClient is the client API for PrivateDisplayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateDisplayServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	SetEnabled(ctx context.Context, in *SetEnabledRequest, opts ...grpc.CallOption) (*SetEnabledResponse, error)
}

type privateDisplayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateDisplayServiceClient(cc grpc.ClientConnInterface) PrivateDisplayServiceClient {
	return &privateDisplayServiceClient{cc}
}

func (c *privateDisplayServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, PrivateDisplayService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDisplayServiceClient) SetEnabled(ctx context.Context, in *SetEnabledRequest, opts ...grpc.CallOption) (*SetEnabledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetEnabledResponse)
	err := c.cc.Invoke(ctx, PrivateDisplayService_SetEnabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateDisplayServiceServer is the server API for PrivateDisplayService service.
// All implementations should embed UnimplementedPrivateDisplayServiceServer
// for forward compatibility.
type PrivateDisplayServiceServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	SetEnabled(context.Context, *SetEnabledRequest) (*SetEnabledResponse, error)
}

// UnimplementedPrivateDisplayServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrivateDisplayServiceServer struct{}

func (UnimplementedPrivateDisplayServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPrivateDisplayServiceServer) SetEnabled(context.Context, *SetEnabledRequest) (*SetEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnabled not implemented")
}
func (UnimplementedPrivateDisplayServiceServer) testEmbeddedByValue() {}

// UnsafePrivateDisplayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateDisplayServiceServer will
// result in compilation errors.
type UnsafePrivateDisplayServiceServer interface {
	mustEmbedUnimplementedPrivateDisplayServiceServer()
}

func RegisterPrivateDisplayServiceServer(s grpc.ServiceRegistrar, srv PrivateDisplayServiceServer) {
	// If the following call pancis, it indicates UnimplementedPrivateDisplayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrivateDisplayService_ServiceDesc, srv)
}

func _PrivateDisplayService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDisplayServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateDisplayService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDisplayServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDisplayService_SetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDisplayServiceServer).SetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateDisplayService_SetEnabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDisplayServiceServer).SetEnabled(ctx, req.(*SetEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateDisplayService_ServiceDesc is the grpc.ServiceDesc for PrivateDisplayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateDisplayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.private.display.v1.PrivateDisplayService",
	HandlerType: (*PrivateDisplayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PrivateDisplayService_List_Handler,
		},
		{
			MethodName: "SetEnabled",
			Handler:    _PrivateDisplayService_SetEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/private/display/v1/service.proto",
}
